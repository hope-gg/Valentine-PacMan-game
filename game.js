const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// ==== –ê–î–ê–ü–¢–ê–¶–Ü–Ø –î–õ–Ø –°–ú–ê–†–¢–§–û–ù–Ü–í ====
function resizeCanvas() {
    canvas.width = window.innerWidth * 0.9;
    canvas.height = window.innerHeight * 0.8;
}
resizeCanvas();
window.addEventListener('resize', resizeCanvas);

let screen = 1;
let player = { collectedHearts: 0, lives: 5 };
let hearts = [];
const requiredHearts = 5;

const romanticMessages = [
  "ùó¨ùóºùòÇ ùóÆùóøùó≤ ùòÅùóµùó≤ ùòÄùóºùóªùó¥ ùòÅùóµùóÆùòÅ ùó∫ùòÜ ùóµùó≤ùóÆùóøùòÅ ùóπùóºùòÉùó≤ùòÄ ùòÅùóº ùòÄùó∂ùóªùó¥.",
  "ùóîùóπùóπ ùòÅùóµùóÆùòÅ ùòÜùóºùòÇ ùóÆùóøùó≤ ùó∂ùòÄ ùóÆùóπùóπ ùòÅùóµùóÆùòÅ ùóú‚Äôùóπùóπ ùó≤ùòÉùó≤ùóø ùóªùó≤ùó≤ùó±.",
  "ùóßùóÆùó∏ùó≤ ùó∫ùòÜ ùóµùóÆùóªùó±, ùòÅùóÆùó∏ùó≤ ùó∫ùòÜ ùòÑùóµùóºùóπùó≤ ùóπùó∂ùó≥ùó≤ ùòÅùóºùóº, ùóØùòÇùòÅ ùóú ùó∞ùóÆùóª'ùòÅ ùóµùó≤ùóπùóΩ ùó≥ùóÆùóπùóπùó∂ùóªùó¥ ùó∂ùóª ùóπùóºùòÉùó≤ ùòÑùó∂ùòÅùóµ ùòÜùóºùòÇ.",
  "ùóüùó∂ùó≥ùó≤ ùó∂ùòÄ ùóØùó≤ùòÅùòÅùó≤ùóø ùòÑùóµùó≤ùóª ùóú ùóµùóÆùòÉùó≤ ùòÜùóºùòÇ ùóØùòÜ ùó∫ùòÜ ùòÄùó∂ùó±ùó≤.",
  "ùóú ùóπùóºùòÉùó≤ ùòÅùóµùóÆùòÅ ùòÑùó≤'ùòÉùó≤ ùóªùó≤ùòÉùó≤ùóø ùóπùóºùòÄùòÅ ùòÅùóµùó≤ ùó∫ùóÆùó¥ùó∂ùó∞ ùòÅùóµùóÆùòÅ ùó∫ùóÆùó∏ùó≤ùòÄ ùòÇùòÄ ùòÇùòÄ.",
  "ùó™ùó∂ùòÅùóµ ùòÜùóºùòÇ, ùó≤ùòÉùó≤ùóøùòÜ ùó∫ùóºùó∫ùó≤ùóªùòÅ ùó∂ùòÄ ùó©ùóÆùóπùó≤ùóªùòÅùó∂ùóªùó≤'ùòÄ ùóóùóÆùòÜ."
];

let finalMessage = romanticMessages[Math.floor(Math.random() * romanticMessages.length)];

// ==== –§–û–ù–û–í–ê –ê–ù–Ü–ú–ê–¶–Ü–Ø ====
function drawBackground() {
  ctx.fillStyle = "#FCF5EB";
  ctx.fillRect(0, 0, canvas.width, canvas.height);
}

// ==== –í–•–Ü–î–ù–ò–ô –ï–ö–†–ê–ù ====
function drawWelcomeScreen() {
  drawBackground();
  ctx.fillStyle = "#D72638";
  ctx.font = "42px 'Playfair Display', serif";
  ctx.textAlign = "center";
  ctx.fillText("LOVE IN THE AIR", canvas.width / 2, canvas.height / 2 - 50);
}

// ==== –ì–û–õ–û–í–ù–ò–ô –Ü–ì–†–û–í–ò–ô –ï–ö–†–ê–ù ====
function drawGameScreen() {
  drawBackground();
  ctx.fillStyle = "#D72638";
  ctx.font = "36px 'Inter', sans-serif";
  ctx.fillText(`Catch the hearts: ${player.collectedHearts}/${requiredHearts}`, canvas.width / 2, 50);

  hearts.forEach(heart => {
    ctx.globalAlpha = heart.opacity;
    ctx.fillStyle = heart.isBroken ? "#D72638" : "#FF4D6D";
    ctx.beginPath();
    ctx.arc(heart.x, heart.y, heart.size / 2, 0, Math.PI * 2);
    ctx.fill();
    ctx.globalAlpha = 1;
  });
}

// ==== –§–Ü–ù–ê–õ–¨–ù–ò–ô –ï–ö–†–ê–ù ====
function drawEndScreen() {
  drawBackground();
  ctx.fillStyle = "#D72638";
  ctx.font = "bold 32px 'Playfair Display', serif";
  ctx.textAlign = "center";

  // –ì–∞—Ä–º–æ–Ω—ñ–π–Ω–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
  let maxWidth = canvas.width * 0.8;
  let x = canvas.width / 2;
  let y = canvas.height / 2;

  wrapText(ctx, finalMessage, x, y, maxWidth, 40);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
function wrapText(context, text, x, y, maxWidth, lineHeight) {
  let words = text.split(' ');
  let line = '';
  let lines = [];

  for (let i = 0; i < words.length; i++) {
    let testLine = line + words[i] + ' ';
    let metrics = context.measureText(testLine);
    let testWidth = metrics.width;

    if (testWidth > maxWidth && i > 0) {
      lines.push(line);
      line = words[i] + ' ';
    } else {
      line = testLine;
    }
  }
  lines.push(line);

  let startY = y - ((lines.length - 1) * lineHeight) / 2;
  lines.forEach((line, index) => {
    context.fillText(line, x, startY + (index * lineHeight));
  });
}

// ==== –û–ë–†–û–ë–ö–ê –ö–õ–Ü–ö–Ü–í ====
canvas.addEventListener("click", (e) => {
    const rect = canvas.getBoundingClientRect();
    const clickX = e.clientX - rect.left;
    const clickY = e.clientY - rect.top;

    if (screen === 1) {
        screen = 2;
        player.collectedHearts = 0;
        hearts = [];
        for (let i = 0; i < 10; i++) hearts.push({
            x: Math.random() * (canvas.width - 100),
            y: Math.random() * (canvas.height - 150),
            size: 100,
            isBroken: Math.random() < 0.3
        });
    } else if (screen === 2) {
        hearts = hearts.filter(heart => {
            const distance = Math.hypot(clickX - heart.x, clickY - heart.y);
            if (distance < heart.size * 0.7) {
                if (!heart.isBroken) {
                    player.collectedHearts++;
                    if (player.collectedHearts >= requiredHearts) {
                        screen = 3;
                    }
                } else {
                    player.collectedHearts = Math.max(0, player.collectedHearts - 1);
                }
                return false;
            }
            return true;
        });
    }
});

// ==== –ó–ê–ü–£–°–ö ====
function gameLoop() {
  if (screen === 1) drawWelcomeScreen();
  else if (screen === 2) drawGameScreen();
  else if (screen === 3) drawEndScreen();
  requestAnimationFrame(gameLoop);
}
window.addEventListener("load", gameLoop);
